package mop;

import java.util.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if next()/previous() is invoked when hasNext()/hasPrevious() is not
 * invoked or returns false.
 *
 * This property requires that hasNext()/hasPrevious() be called before
 * next()/previous() and that hasNext()/hasPrevious() return true.
 *
 * @severity warning
 */

ListIterator_hasNextPrevious(ListIterator i) {
	event e129 after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasNext()) && target(i) &&
		condition(b) {}
	event e128 after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasNext()) && target(i) &&
		condition(!b) {}
	event e132 before(ListIterator i) :
		call(* ListIterator.next()) && target(i) {}

	event e131 after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasPrevious()) && target(i) &&
		condition(b) {}
	event e130 after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasPrevious()) && target(i) &&
		condition(!b) {}
	event e133 before(ListIterator i) :
		call(* ListIterator.previous()) && target(i) {}

	fsm :
		na [
			e129 -> nextavailable
			e128 -> na
			e131 -> prevavailable
			e130 -> na
		]
		nextavailable [
			e131 -> bothavailable
			e130 -> nextavailable
			e129 -> nextavailable
			e128 -> na
			e132 -> prevavailable
		]
		prevavailable [
			e129 -> bothavailable
			e128 -> prevavailable
			e131 -> prevavailable
			e130 -> na
			e133 -> nextavailable
		]
		bothavailable [
			e129 -> bothavailable
			e128 -> prevavailable
			e131 -> bothavailable
			e130 -> nextavailable
			e132 -> prevavailable
			e133 -> nextavailable
		]

	@fail {
		RVMLogging.out.println(Level.WARNING, __DEFAULT_MESSAGE);
		RVMLogging.out.println(Level.WARNING, "ListIterator.hasNext()/hasPrevious() was not called before calling next()/previous().");
	}
}

